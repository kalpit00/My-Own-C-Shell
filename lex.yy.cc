#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 20
#define YY_END_OF_BUFFER 21
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[404] =
    {   0,
        0,    0,    0,    0,   21,   19,    2,    1,   19,   19,
        6,   19,    4,    3,   17,   19,   19,    7,   13,   12,
       20,   19,   19,    0,   17,   19,    0,   18,   19,    0,
       17,   19,   19,   19,   10,    0,    8,    5,   14,   14,
       14,   14,   14,   17,   19,    0,   19,    0,   17,   16,
       19,   13,   13,   13,   13,   12,   18,   18,   19,   18,
        0,   14,   14,   14,   14,   14,   14,   17,   19,    0,
       19,   16,    0,   17,   19,    0,   19,    0,   17,   15,
       14,   19,    9,   14,   14,   14,   17,   14,    0,   17,
       17,   17,   17,   17,   16,   19,   16,    0,   16,   14,

       14,   14,   14,   14,   14,   17,   19,   13,   13,   13,
       13,   13,   13,   13,   14,   14,   19,   14,   14,   14,
       14,   14,   17,   14,   14,    0,   14,   17,   14,   17,
       17,   17,   17,   17,   16,   16,   19,   16,    0,   14,
       14,   14,   14,   14,   14,   17,   15,   19,   15,    0,
       15,   14,   14,   14,   14,   14,   17,   14,   15,   15,
       15,   15,   15,   15,   14,   19,   14,   14,   14,   19,
       14,   14,   14,   14,   17,   14,   14,    0,   14,   17,
       14,   17,   14,   17,   17,   17,   16,   19,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   14,   14,   19,   18,   14,   17,   17,   14,   14,
       19,   14,   14,   14,   14,   14,   17,   14,   14,    0,
       14,   17,   14,   17,   17,   16,   17,   17,   15,   14,
       19,   14,   15,   15,   14,   15,   15,   14,   14,   14,
       17,   14,   14,    0,   14,   17,   14,   17,   14,   17,
       17,   17,   15,   14,   14,   14,   14,   15,   15,   14,
       14,   14,   14,   14,   14,   15,   14,   19,   14,   16,
       14,   16,   16,   19,   13,   13,   13,   13,   13,   14,
       14,   19,   16,   14,   16,   16,   15,   14,   19,   14,
       15,   14,   14,   14,   15,   15,   14,   14,   15,   14,

       15,   15,   14,   14,   14,   15,   14,   15,   15,   15,
       15,   15,   15,   15,   14,   14,   15,   15,   15,   15,
       15,   15,   15,   11,   15,   15,   15,   14,   15,   15,
       15,   14,   15,   15,   15,   14,   14,   15,   15,   15,
       14,   14,   14,   14,   15,   14,   15,   14,   14,   14,
       14,   14,   14,   15,   14,   15,   15,   14,   14,   14,
       15,   14,   15,   14,   14,   15,   14,   14,   15,   14,
       15,   14,   14,   14,   15,   14,   14,   15,   14,   15,
       15,   15,   15,   15,   15,   15,   14,   14,   15,   15,
       14,   14,   14,   14,   15,   15,   15,   15,   15,   15,

       15,   15,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,   14,    1,    1,   15,    1,

       16,    1,    1,    1,    1,    1,    1,    1,    1,   17,
       18,    1,    1,   19,   20,   17,   21,    1,    1,    1,
        1,    1,   22,   23,   24,   25,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[26] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    1,    1,    1,
        6,    6,    1,    1,    1,    1,    7,    1,    1,    1,
        1,    1,    6,    1,    1
    } ;

static const flex_int16_t yy_base[586] =
    {   0,
        0,    0,   24,   27,  328,   25, 5953, 5953,   47,   64,
       77,   31,  314,   28,   99,  121,   39,  313,  138,    0,
     5953,   34,  151,  312,  173,  195,  319,   42,  217,  239,
      251,  273,  295,  318,  304,    0,  303,   55,  335,  302,
      348,  301,  365,  382,  404,  298,  426,  448,  461,   47,
       57,  478,  491,  298,  513,    0, 5953,  526,  548,  297,
       77,  570,  592,    0,  604,  626,  638,  660,  682,  295,
      704,    0,  726,  739,  763,  279,  786,   61,  809,  832,
      845,    0,  285,    0,  858,  282,  880,  277,  896,  912,
      934,   22,    0,  945, 5953,  967,  980,   78,  268, 1002,

     1024, 1037, 1059, 1072,    0, 1094, 1111, 1133, 1155, 1166,
     1179,  265, 1196, 1213, 1235, 1248, 1270,  263,    0,    0,
     1292, 1314, 1326, 1342,  258,   88, 1345, 1367,  257, 1389,
        0, 1405,   94, 1427,  257, 1449, 1471, 1493, 1504, 1520,
     1542, 1554, 1576, 1598,    0, 1610,  254, 1632, 1655, 1676,
      102, 1699,  105, 1722,  107, 1745, 1768, 1791, 1813,  253,
     1835, 1857,  111, 1879, 1892, 1914,    0, 1936, 1949, 1971,
      244, 1993, 2015, 2037, 2050,    0, 2072,  123,  236, 2085,
     2098, 2120,  233, 2136,  134, 2158,    0, 2175, 2188,  232,
      130,    0, 2205, 2218,  226, 2240, 2262, 2284,  135,    0,

     2295, 2317, 2330, 2352,    0, 2374,  143,    0, 2396, 2418,
     2440, 2462, 2474, 2496, 2518, 2540, 2552, 2568,    0, 2579,
     2595, 2617, 2633, 2645, 2661, 2683, 2705, 2713,   61, 2735,
     2758, 2781, 2803, 2825,  154, 2847, 2867, 2883, 2906,  155,
     2929, 2952,  157, 2973,  176, 2996, 3019, 3041,  181, 3064,
       42, 3087, 3110, 3132,  216, 3154,  199, 3176, 3192,    0,
      207,  214,    0,  221,    0, 3215, 3237, 3259, 3272,    0,
     3294,  180,    0, 3311, 3324,  213, 3346, 3368, 3379, 3401,
     3423, 3445, 3461, 3483, 3505, 3527,  115, 3535, 3558, 3574,
     3596,    0,  203,  229, 3618, 3634,    0,  202, 3657, 3679,

     3699, 3715, 3738, 3759,  195, 3782, 3798, 3819, 3835,  163,
      193, 3857,  208,    0, 3879,    0, 3902,  187,  182, 3925,
     3948, 3972, 3996, 4013,  226,  189,  166, 4035,  151, 4058,
     4081, 4103, 4126, 4148,  259, 4171, 4194,  150,  245, 4217,
     4240,  149, 4263, 4286, 4309,    0,    0,    0, 4325,  130,
        0, 4348,    0, 4371,    0,  192, 4394, 4417,  121, 4440,
     4463,    0,    0,    0,  108, 4479,    0, 4502, 4524,  281,
      105,    0,  286,   97, 4547,    0, 4563, 4586,  287, 4609,
      267,   92, 4632,  299,    0,    0,    0,    0,   75,    0,
        0,   62,    0,   51,   24,    0, 4655,  231,    0,    0,

        0,  307, 5953, 4679, 4686, 4693, 4700, 4707, 4714, 4721,
     4728, 4735, 4742, 4749, 4756, 4763, 4770, 4777, 4784, 4791,
     4797, 4804, 4811, 4818, 4825, 4832, 4839, 4846, 4853, 4860,
     4867, 4874, 4881, 4888, 4895, 4902, 4909, 4916, 4923, 4930,
     4937, 4944, 4951, 4958, 4965, 4972, 4979, 4986, 4993, 5000,
     5007, 5014, 5021, 5028, 5035, 5042, 5049, 5056, 5063, 5070,
     5077, 5084, 5091, 5098, 5105, 5112, 5119, 5126, 5133, 5140,
     5147, 5154, 5161, 5168, 5175, 5182, 5189, 5196, 5203, 5210,
     5217, 5224, 5231, 5238, 5245, 5252, 5259, 5266, 5273, 5280,
     5287, 5294, 5301, 5308, 5315, 5322, 5329, 5336, 5343, 5350,

     5357, 5364, 5371, 5378, 5385, 5392, 5399, 5406, 5413, 5420,
     5427, 5434, 5441, 5448, 5455, 5462, 5469, 5476, 5483, 5490,
     5497, 5504, 5511, 5518, 5525, 5532, 5539, 5546, 5553, 5560,
     5567, 5574, 5581, 5588, 5595, 5602, 5609, 5616, 5623, 5630,
     5637, 5644, 5651, 5658, 5665, 5672, 5679, 5686, 5693, 5700,
     5707, 5714, 5721, 5728, 5735, 5742, 5749, 5756, 5763, 5770,
     5777, 5784, 5791, 5798, 5805, 5812, 5819, 5826, 5833, 5840,
     5847, 5854, 5861, 5868, 5875, 5882, 5889, 5896, 5903, 5910,
     5917, 5924, 5931, 5938, 5945
    } ;

static const flex_int16_t yy_def[586] =
    {   0,
      403,    1,  404,  404,  403,  405,  403,  403,  406,  405,
      407,   10,  408,  408,  409,  410,   10,  408,  411,  412,
      403,   10,  407,  408,  409,  406,  413,   10,  414,  415,
      416,  417,  418,  419,  408,  420,  408,  408,  421,  422,
      423,  424,  421,  425,  410,  426,  427,  428,  429,   10,
       10,  411,  430,  431,  432,  412,  403,  407,  433,  408,
      434,  435,  436,   43,  437,  438,  435,  439,  417,  440,
      441,   69,  442,  403,  418,  443,  444,  445,  446,  447,
      448,  449,  408,   43,  423,  424,   43,  422,  422,  423,
      424,  450,  451,  425,  403,  452,  407,  453,  408,  454,

      455,  456,  457,  454,   43,  458,  459,  460,  461,  462,
      463,  464,  462,  465,  466,  448,  467,  422,   67,   43,
      468,  469,   67,  470,  422,  470,  423,  468,  424,  469,
       94,  471,  472,  473,  474,  475,  476,  477,  478,  479,
      480,  481,  479,  482,  143,  483,  484,  485,  486,  487,
      488,  489,  490,  491,  492,  489,  493,  494,  495,  484,
      495,  486,  488,  496,  448,  448,   43,  497,  448,  498,
      422,  499,  500,  501,  499,   43,  502,  502,  422,  500,
      423,  501,  424,  503,  504,  505,   94,  506,  507,  508,
      509,  510,  511,  512,  513,  511,  512,  513,  514,  515,

      516,  517,  448,  517,  518,  519,  520,  521,  522,  522,
      523,  524,  525,  526,  525,  527,  215,  524,  218,  524,
      526,  221,  527,  223,  528,  529,  530,  529,  531,  532,
      533,  534,  535,  536,  537,  538,  539,  540,  541,  542,
      540,  543,  544,  544,  537,  541,  545,  542,  546,  547,
      548,  549,  550,  543,  254,  545,  546,  254,  551,  254,
      537,  254,  256,  546,  254,  550,  552,  552,  553,  554,
      555,  556,  557,  558,  559,  560,  559,  560,  561,  562,
      562,  281,  563,  564,  528,  530,  565,  532,  288,  534,
      566,  290,  290,  537,  290,  567,  290,  290,  566,  537,

      537,  568,  537,  540,  256,  256,  546,  546,  569,  570,
      266,  569,  570,  266,  571,  254,  551,  565,  317,  567,
      568,  403,  572,  558,  565,  573,  299,  574,  320,  575,
      576,  577,  568,  578,  579,  580,  581,  312,  570,  582,
      571,  341,  580,  581,  341,  254,  317,  341,  577,  341,
      343,  581,  341,  582,  254,  565,  583,  574,  358,  577,
      358,  290,  320,  358,  358,  583,  290,  577,  577,  537,
      333,  368,  537,  343,  343,  256,  581,  581,  546,  584,
      585,  354,  584,  585,  354,  266,  341,  341,  366,  299,
      358,  368,  343,  377,  383,  312,  585,  570,  354,  366,

      383,  585,    0,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403
    } ;

static const flex_int16_t yy_nxt[5979] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,    6,    6,   12,
       13,   14,   15,   16,    6,    6,    6,    6,    6,   17,
        6,    6,   18,    6,   19,   21,   21,   21,   21,   21,
       21,   23,   93,   93,   37,   24,   24,   25,   22,   38,
       36,   22,   35,   76,   93,  401,   22,   24,   27,   22,
       27,   28,   22,   29,   22,   22,   51,   30,   30,   31,
       22,   83,   76,   22,   22,  310,  229,   36,   22,   30,
       23,   32,  344,  150,   24,   24,   25,  107,   22,   40,
       40,  118,  287,  360,  151,   33,   24,   24,   24,   34,
       88,  171,  125,   27,   46,   27,  400,   27,  208,   24,

       40,   40,   40,  160,   27,   41,   76,  236,   76,   42,
       42,   43,  160,  399,  237,   44,  236,  244,  393,  248,
      325,   42,   46,  237,   46,   88,  321,   47,  245,  391,
      249,   48,   48,   49,   50,   46,  179,   46,  326,   46,
      192,  192,  391,   48,   53,  200,  200,  273,   54,   54,
       55,  387,  192,   93,   93,  160,   76,  200,   76,  300,
       54,   24,   24,   34,  160,   93,  301,  248,  339,  244,
      387,  380,  363,   24,   40,   40,   40,  160,  249,   41,
      245,  300,  160,   42,   42,   43,  307,  357,  301,   44,
       93,   93,  325,  308,  229,   42,   27,  325,   27,   28,

      160,   29,   93,  347,  307,   30,   30,   31,  160,  160,
      326,  308,  300,  339,  340,  326,  336,   30,   27,  301,
       27,   58,  160,  328,  328,  278,  307,   30,   30,   59,
      160,  325,  160,  308,  300,  315,  339,  315,  198,   30,
       27,  301,   27,   60,  278,   91,  160,  356,   89,  326,
      339,   61,   63,   40,   63,   64,   89,   65,  229,  229,
      160,   66,   66,   67,  236,  135,  381,   68,  318,   91,
       89,  237,  397,   66,   70,   89,   70,  198,   22,   71,
       36,   72,  160,   73,   73,   74,  300,  160,  160,   89,
      398,  300,  307,  301,   91,   73,   76,   36,  301,  308,

      318,   77,  147,  135,  397,   78,   78,   79,  318,   36,
      109,   95,  397,   91,   89,   36,   36,   78,   80,   40,
       40,   40,  398,   57,   36,   36,   36,  403,   40,   40,
      398,  403,  403,  403,   82,  403,  403,  403,  403,  403,
       40,   85,  403,  403,  403,   86,   86,   87,  403,  403,
      403,  403,  403,  403,  403,  403,  403,   86,   86,   86,
       90,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       86,   85,  403,  403,  403,   86,   86,   87,  403,  403,
      403,  403,  403,  403,  403,  403,  403,   86,   92,  403,
      403,  403,   93,   93,   94,  403,  403,  403,  403,  403,

      403,  403,  403,  403,   93,   46,  403,   46,  403,  403,
       47,  403,  403,  403,   48,   48,   49,   50,  403,  403,
      403,  403,  403,  403,  403,  403,   48,   46,  403,   46,
      403,  403,  403,  403,  403,  403,   48,   48,   96,   97,
      403,  403,  403,  403,  403,  403,  403,  403,   48,   46,
      403,   46,  403,  403,  403,  403,  403,  403,  403,  403,
       98,   99,  101,   40,  101,  403,  403,  102,  403,  403,
      403,  103,  103,  104,  105,  403,  403,  106,  403,  403,
      403,  403,  403,  103,   53,  403,  403,  403,   54,   54,
       55,  403,  403,  403,  403,  403,  403,  403,  403,  403,

       54,   54,   54,  108,  403,  403,  403,  403,  403,  403,
      403,  403,  403,   54,   40,   40,   40,  403,  403,  111,
      403,  403,  403,  112,  112,  113,  403,  403,  403,  114,
      403,  403,  403,  403,  403,  112,   24,   24,   34,  403,
      403,  403,  403,  403,  403,  403,  403,  403,   24,   63,
       40,   63,  116,  403,  403,  403,  403,  403,   63,   63,
      403,  403,  403,  403,  117,  403,  403,  403,  403,  403,
       63,   27,  403,   27,  120,  403,  121,  403,  403,  403,
      122,  122,  123,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  122,   27,  403,   27,  125,  403,  403,  403,

      403,  403,  403,  403,  126,   27,  403,   27,  127,  403,
      403,  403,  403,  403,  122,  122,  128,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  122,   27,  403,   27,
      129,  403,  403,  403,  403,  403,  403,  403,  130,   27,
      403,   27,  120,  403,  121,  403,  403,  403,  122,  122,
      123,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      122,   27,  403,   27,  131,  403,  132,  403,  403,  403,
      133,  133,  134,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  133,   70,  403,   70,  403,   22,   71,  403,
       72,  403,   73,   73,   74,  403,  403,  403,  403,  403,

      403,  403,  403,  403,   73,   70,  403,   70,  403,   23,
      403,  403,  136,  403,   73,   73,  137,  403,  403,  403,
      403,  403,  403,  403,  403,  403,   73,   70,  403,   70,
      403,   24,  403,  403,  138,  403,  403,  403,  139,  140,
      141,   40,  141,  140,   39,  142,  140,  143,  140,  144,
      144,  145,  140,  140,  140,  146,  140,  140,  140,  140,
      140,  144,  140,  140,   76,  403,  403,  403,  403,   77,
      403,  403,  403,   78,   78,   79,  403,  403,  403,  403,
      403,  403,  403,  403,  403,   78,   80,   76,  403,  403,
      403,  403,  403,  403,  403,  403,   78,   78,  148,  403,

      403,  403,  403,  403,  403,  403,  403,  403,   78,  149,
      153,   40,   40,  403,  403,  154,  403,  403,  403,  155,
      155,  156,  403,  403,  403,  157,  403,  403,  403,  403,
      403,  155,  158,  160,  403,  403,  403,  161,  162,  403,
      403,  403,  163,  163,  164,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  163,   88,   88,  166,  403,  403,
      403,  403,  403,  403,  403,  403,  403,   88,   86,   86,
       90,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       86,   88,   88,   88,  403,  403,  403,  403,  403,  403,
      403,  403,  167,  403,  403,  403,   44,   88,   88,   88,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,   88,   88,   88,  403,  403,  403,  403,
      403,  403,   86,   86,  403,  403,  403,  403,   92,  403,
      403,  403,  403,  403,   86,   88,   88,   88,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       93,   92,  403,  403,  403,   93,   93,   94,  403,  403,
      403,  403,  403,  403,  403,  403,  403,   93,  101,   40,
      101,  403,  403,  403,  403,  403,  403,  101,  101,  403,
      169,  403,  403,  170,  403,  403,  403,  403,  403,  101,
       24,   24,   34,  403,  403,  403,  403,  403,  403,  403,

      403,  403,   24,   46,  403,   46,  403,  403,  173,  403,
      403,  403,  174,  174,  175,  176,  403,  403,  403,  403,
      403,  403,  403,  403,  174,   46,  403,   46,  403,  403,
      403,  403,  403,  403,  403,  403,  178,  179,   46,  403,
       46,  403,  403,  403,  403,  403,  403,  174,  174,  180,
      181,  403,  403,  403,  403,  403,  403,  403,  403,  174,
       46,  403,   46,  403,  403,  403,  403,  403,  403,  403,
      403,  182,  183,   46,  403,   46,  403,  403,  173,  403,
      403,  403,  174,  174,  175,  176,  403,  403,  403,  403,
      403,  403,  403,  403,  174,   46,  403,   46,  403,  403,

      184,  403,  403,  403,  185,  185,  186,  187,  403,  403,
      403,  403,  403,  403,  403,  403,  185,   23,  403,  403,
      403,   24,   24,   25,  403,  403,  403,  403,  403,  188,
      403,  403,  403,   24,   40,   40,   40,  403,  403,  403,
      403,  403,  403,  190,  190,  403,  403,  403,  403,  191,
      403,  403,  403,  403,  403,  190,   40,   40,   40,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  192,  194,  403,  403,  403,  195,  195,  196,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  195,  195,
      195,  197,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  195,  194,  403,  403,  403,  195,  195,  196,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  195,  199,
      403,  403,  403,  200,  200,  201,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  200,   27,  403,   27,  203,
      403,  403,  403,  403,  403,  124,  124,  204,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  124,   88,   88,
      166,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       88,   27,  403,   27,  205,  403,  403,  403,  403,  403,
       27,   27,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,   27,   27,  403,   27,  127,  403,  403,  403,

      403,  403,  122,  122,  128,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  122,   27,  403,   27,  129,  403,
      403,  403,  403,  403,  403,  403,  130,  124,   88,  124,
      403,  403,  403,  403,  403,  403,  403,  403,  206,  403,
      403,  403,   68,   27,  403,   27,  125,  403,  403,  403,
      403,  403,  403,  403,  126,   86,   86,   90,  403,  403,
      403,  403,  403,  403,  403,  403,  403,   86,  124,   88,
      124,  127,  403,  403,  403,  403,  403,  122,  122,  403,
      403,  403,  403,  132,  403,  403,  403,  403,  403,  122,
      124,   88,  124,  129,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  133,   27,  403,   27,  207,
      403,  403,  403,  403,  403,  133,  133,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  133,   27,  403,
       27,  131,  403,  132,  403,  403,  403,  133,  133,  134,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  133,
       70,  403,   70,  403,   23,  403,  403,  136,  403,   73,
       73,  137,  403,  403,  403,  403,  403,  403,  403,  403,
      403,   73,  141,   40,  141,  403,   81,  403,  403,  210,
      403,  141,  141,  403,  403,  403,  403,  211,  403,  403,
      403,  403,  403,  141,   70,  403,   70,  403,   24,  403,

      403,  138,  403,  403,  403,  139,   40,  403,  403,   40,
      403,  403,  212,  403,  403,  403,  403,  403,  403,  403,
       70,   70,  403,   70,  403,   84,  214,  403,  215,  403,
      216,  216,  217,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  216,   70,  403,   70,  403,   88,  403,  403,
      219,  403,  403,  403,  220,   70,  403,   70,  403,   85,
      403,  403,  221,  403,  216,  216,  222,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  216,   70,  403,   70,
      403,   84,  214,  403,  215,  403,  216,  216,  217,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  216,   70,

      403,   70,  403,   86,  403,  403,  223,  403,  403,  403,
      224,   70,  403,   70,  403,   44,  225,  403,  226,  403,
      227,  227,  228,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  227,  153,   40,   40,  403,  403,  403,  403,
      403,  403,  153,  153,  403,  403,  403,  403,  231,  403,
      403,  403,  403,  403,  153,  232,  160,  403,  403,  403,
      233,  403,  403,  403,  403,  163,  163,  234,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  163,   40,   40,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,   76,  403,  403,  403,  403,  403,  403,  235,

       76,  403,  403,  403,  403,  239,  403,  403,  403,  240,
      240,  241,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  240,  242,   76,  403,  403,  403,  403,  403,  403,
      403,  403,  240,  240,  246,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  240,  247,   76,  403,  403,  403,
      403,  239,  403,  403,  403,  240,  240,  241,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  240,  242,   76,
      403,  403,  403,  403,  250,  403,  403,  403,  251,  251,
      252,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      251,  253,  160,  403,  403,  403,  255,  256,  403,  403,

      403,  257,  257,  258,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  257,  160,  403,  403,  403,  161,  162,
      403,  403,  403,  163,  163,  164,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  163,  160,  403,  403,  403,
      161,  162,  403,  403,  403,  163,  163,  164,  403,  403,
      403,  403,  403,  403,  403,  403,  259,  163,  160,  403,
      403,  403,  233,  403,  403,  403,  403,  163,  163,  234,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  163,
      261,   40,   40,  403,  262,  263,  403,  403,  403,  264,
      264,  265,  403,  403,  403,  266,  403,  403,  403,  403,

      403,  264,   88,   88,  166,  403,  403,  403,  403,  403,
      403,  403,  403,  403,   88,   88,   88,   88,  403,  403,
      403,  403,  403,  403,   88,   88,  403,  403,  403,  403,
       82,  403,  403,  403,  403,  403,   88,   46,  403,   46,
      403,  403,  403,  403,  403,  403,  177,  177,  268,  269,
      403,  403,  403,  403,  403,  403,  403,  403,  177,   88,
       88,  166,  403,  403,  403,  403,  403,  403,  403,  403,
      403,   88,   46,  403,   46,  403,  403,  403,  403,  403,
      403,   46,   46,  403,  270,  403,  403,  403,  403,  403,
      403,  403,  403,   46,   46,  403,   46,  403,  403,  173,

      403,  403,  403,  174,  174,  175,  176,  403,  403,  403,
      403,  403,  403,  403,  403,  174,   46,  403,   46,  403,
      403,  403,  403,  403,  403,  174,  174,  180,  181,  403,
      403,  403,  403,  403,  403,  403,  403,  174,   46,  403,
       46,  403,  403,  403,  403,  403,  403,  403,  403,  182,
      183,  177,   88,  177,  403,  403,  173,  403,  403,  403,
      174,  174,  271,  176,  403,  403,  106,  403,  403,  403,
      403,  403,  174,   46,  403,   46,  403,  403,  403,  403,
      403,  403,  403,  403,  178,  179,  177,   88,  177,  403,
      403,  403,  403,  403,  403,  174,  174,  403,  181,  403,

      403,  184,  403,  403,  403,  403,  403,  174,   86,   86,
       90,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       86,  177,   88,  177,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  183,  403,  403,  185,   46,  403,   46,
      403,  403,  403,  403,  403,  403,  185,  185,  403,  272,
      403,  403,  403,  403,  403,  403,  403,  403,  185,   46,
      403,   46,  403,  403,  184,  403,  403,  403,  185,  185,
      186,  187,  403,  403,  403,  403,  403,  403,  403,  403,
      185,   23,  403,  403,  403,   24,   24,   25,  403,  274,
      403,  403,  403,  403,  403,  403,  403,   24,  276,  276,

      277,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      276,  194,  403,  403,  403,  195,  195,  196,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  195,  195,  195,
      197,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      195,   88,   88,   88,  403,  403,  194,  403,  403,  403,
      195,  195,  279,  403,  403,  403,  114,  403,  403,  403,
      403,  403,  195,   88,   88,   88,  403,  403,  403,  403,
      403,  403,  195,  195,  403,  403,  403,  403,  199,  403,
      403,  403,  403,  403,  195,   88,   88,   88,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      200,  199,  403,  403,  403,  200,  200,  201,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  200,   27,  403,
       27,  203,  403,  403,  403,  403,  403,  124,  124,  204,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  124,
       88,   88,  166,  403,  403,  403,  403,  403,  403,  403,
      403,  403,   88,  124,   88,  124,  203,  403,  403,  403,
      403,  403,  124,  124,  403,  403,  403,  403,  117,  403,
      403,  403,  403,  403,  124,   27,  403,   27,  120,  403,
      121,  403,  403,  403,  122,  122,  123,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  122,   70,  403,   70,

      403,  165,  403,  403,  281,  403,  218,  218,  282,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  218,   70,
      403,   70,  403,  165,  403,  403,  281,  403,  218,  218,
      282,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      218,   70,  403,   70,  403,   82,  403,  403,  283,  403,
       70,   70,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,   70,   70,  403,   70,  403,   88,  403,  403,
      219,  403,  403,  403,  220,   70,  403,   70,  403,   84,
      214,  403,  215,  403,  216,  216,  217,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  216,   70,  403,   70,

      403,   85,  403,  403,  221,  403,  216,  216,  222,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  216,   70,
      403,   70,  403,   84,  214,  403,  215,  403,  216,  216,
      217,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      216,   70,  403,   70,  403,   86,  403,  403,  223,  403,
      403,  403,  224,  218,   88,  218,  403,  403,  403,  403,
      403,  403,  403,  403,  284,  403,  403,  403,  146,   70,
      403,   70,  403,   88,  403,  403,  219,  403,  403,  403,
      220,   88,  403,  403,   88,  403,  403,  219,  403,  403,
      403,  403,  403,  403,  403,   70,   70,  403,   70,  403,

       85,  403,  403,  221,  403,  216,  216,  222,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  216,  218,   88,
      218,  403,  403,  403,  403,  403,  403,  403,  403,  214,
      403,  403,  403,  225,   70,  403,   70,  403,   86,  403,
      403,  223,  403,  403,  403,  224,  218,   88,  218,  403,
      403,  403,  403,  403,  403,  403,  403,  216,  403,  403,
      403,  227,   70,  403,   70,  403,   92,  403,  403,  285,
      403,  227,  227,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  227,   70,  403,   70,  403,   44,  225,
      403,  226,  403,  227,  227,  228,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  227,   70,  403,   70,  403,
       93,  403,  403,  286,   70,  403,   70,  403,   44,  225,
      403,  226,  403,  227,  227,  228,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  227,   76,  403,  403,  403,
      403,  403,  403,  403,  403,  243,  243,  289,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  243,  290,   76,
      403,  403,  403,  403,  403,  403,  403,  403,   76,   76,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       76,  291,  160,  403,  403,  403,  293,  403,  403,  403,
      403,  294,  294,  295,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  294,  160,  403,  403,  403,  233,  403,
      403,  403,  403,  163,  163,  234,  403,  403,  403,  403,
      403,  403,  403,  403,  296,  163,  261,   40,   40,  403,
      298,  403,  403,  403,  403,  261,  261,  403,  403,  403,
      403,  299,  403,  403,  403,  403,  403,  261,  160,  403,
      403,  403,  236,  403,  403,  403,  403,  403,  403,  237,
      403,  403,  403,  403,  403,  403,  403,  403,  302,   40,
       40,  403,  303,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  160,   76,  403,  403,  403,  403,  239,
      403,  403,  403,  240,  240,  241,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  240,  242,   76,  403,  403,
      403,  403,  403,  403,  403,  403,  240,  240,  246,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  240,  247,
      243,   88,   88,  403,  403,  239,  403,  403,  403,  240,
      240,  304,  403,  403,  403,  157,  403,  403,  403,  403,
      403,  240,  242,  160,  403,  403,  403,  255,  256,  403,
      403,  403,  257,  257,  258,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  257,   88,   88,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,   76,
      403,  403,  403,  403,  403,  403,  245,  243,   88,   88,

      403,  403,  403,  403,  403,  403,  240,  240,  403,  403,
      403,  403,  250,  403,  403,  403,  403,  403,  240,  247,
      160,  403,  403,  403,  305,  403,  403,  403,  403,  257,
      257,  306,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  257,  243,   88,   88,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  251,  403,  403,
      403,  403,  403,  403,  249,   76,  403,  403,  403,  403,
      403,  403,  403,  403,  251,  251,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  251,  309,   76,  403,
      403,  403,  403,  250,  403,  403,  403,  251,  251,  252,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  251,
      253,  160,  403,  403,  403,  311,  312,  403,  403,  403,
      313,  313,  314,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  313,  160,  403,  403,  403,  255,  256,  403,
      403,  403,  257,  257,  258,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  257,  160,  403,  403,  403,  305,
      403,  403,  403,  403,  257,  257,  306,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  257,  294,   88,   88,
      403,  403,  403,  403,  403,  403,  403,  403,  316,  403,
      403,  403,  266,  318,  403,  403,  403,  319,  320,  403,

      403,  403,  321,  321,  322,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  321,  323,  160,  403,  403,  403,
      311,  312,  403,  403,  403,  313,  313,  314,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  313,   46,  403,
       46,  403,  403,  403,  403,  403,  403,  177,  177,  268,
      269,  403,  403,  403,  403,  403,  403,  403,  403,  177,
      177,   88,  177,  403,  403,  403,  403,  403,  403,  177,
      177,  403,  269,  403,  403,  170,  403,  403,  403,  403,
      403,  177,   88,   88,  166,  403,  403,  403,  403,  403,
      403,  403,  403,  403,   88,   46,  403,   46,  403,  403,

      173,  403,  403,  403,  174,  174,  175,  176,  403,  403,
      403,  403,  403,  403,  403,  403,  174,   23,  403,  403,
      403,   24,   24,   25,  403,  403,  324,  403,  403,  403,
      403,  403,  403,   24,  276,  276,  277,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  276,   88,   88,   88,
      403,  403,  403,  403,  403,  403,  276,  276,  403,  403,
      403,  403,  191,  403,  403,  403,  403,  403,  276,   88,
       88,   88,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  192,  194,  403,  403,  403,  195,
      195,  196,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  195,   70,  403,   70,  403,  165,  403,  403,  281,
      403,  218,  218,  282,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  218,   70,  403,   70,  403,  165,  403,
      403,  281,  403,  218,  218,  282,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  218,  218,   88,  218,  403,
      403,  403,  403,  403,  403,  403,  403,  280,  403,  403,
      403,  211,   70,  403,   70,  403,   82,  403,  403,  283,
      403,   70,   70,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,   70,   70,  403,   70,  403,   84,  214,
      403,  215,  403,  216,  216,  217,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  216,   70,  403,   70,  403,
       92,  403,  403,  285,  403,  227,  227,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  227,   70,  403,
       70,  403,   93,  403,  403,  286,   76,  403,  403,  403,
      403,  403,  403,  403,  403,  243,  243,  289,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  243,  290,  243,
       88,   88,  403,  403,  403,  403,  403,  403,  403,  403,
      288,  403,  403,  403,  231,  160,  403,  403,  403,  293,
      403,  403,  403,  403,  294,  294,  295,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  294,  160,  403,  403,

      403,  327,  403,  403,  403,  403,  160,  160,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  160,  294,
       88,   88,  403,  403,  403,  403,  403,  403,  403,  403,
      292,  403,  403,  403,  299,  318,  403,  403,  403,  329,
      403,  403,  403,  403,  321,  321,  330,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  321,  331,  160,  403,
      403,  403,  327,  403,  403,  403,  403,  160,  160,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  160,
      160,  403,  403,  403,  300,  403,  403,  403,  403,  403,
      403,  301,  403,  403,  403,  403,  403,  403,  403,  403,

      332,   88,   88,  403,  300,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  160,  318,  403,  403,  403,
      333,  403,  403,  403,  403,  403,  403,  334,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  335,  160,
      403,  403,  403,  300,  403,  403,  403,  403,  403,  403,
      301,  403,  403,  403,  403,  403,  403,  403,  403,  332,
       76,  403,  403,  403,  403,  239,  403,  403,  403,  240,
      240,  241,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  240,  242,  294,   88,   88,  403,  403,  403,  403,
      403,  403,  403,  403,  256,  403,  403,  403,  312,  160,

      403,  403,  403,  307,  403,  403,  403,  403,  403,  403,
      308,  403,  403,  403,  403,  403,  403,  403,  403,  337,
      294,   88,   88,  403,  307,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  313,  160,  403,  403,  403,
      338,  403,  403,  403,  403,  313,  313,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  313,  160,  403,
      403,  403,  338,  403,  403,  403,  403,  313,  313,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  313,
      318,  403,  403,  403,  342,  343,  403,  403,  403,  344,
      344,  345,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  344,  346,  318,  403,  403,  403,  319,  320,  403,
      403,  403,  321,  321,  322,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  321,  323,  318,  403,  403,  403,
      329,  403,  403,  403,  403,  321,  321,  330,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  321,  331,  318,
      403,  403,  403,  333,  403,  403,  403,  403,  403,  403,
      334,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  335,  348,  349,   40,   40,  348,  350,  351,  348,
      348,  348,  352,  352,  353,  348,  348,  348,  354,  348,
      348,  348,  348,  348,  352,  355,  348,  160,  403,  403,

      403,  161,  162,  403,  403,  403,  163,  163,  164,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  163,   23,
      403,  403,  403,   24,   24,   25,  403,  403,  403,  403,
      403,  403,  403,  403,  403,   24,  318,  403,  403,  403,
      359,  403,  403,  403,  403,  360,  360,  361,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  360,  362,  349,
       40,   40,  403,  365,  403,  403,  403,  403,  349,  349,
      403,  403,  403,  403,  366,  403,  403,  403,  403,  403,
      349,  367,  160,  403,  403,  403,  233,  403,  403,  403,
      403,  163,  163,  234,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  163,  318,  403,  403,  403,  368,  403,
      403,  403,  403,  403,  403,  369,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  370,  318,  403,  403,
      403,  333,  403,  403,  403,  403,  403,  403,  334,  403,
      403,  403,  403,  403,  403,  403,  403,  371,  403,  335,
       40,   40,  403,  372,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  318,  403,  403,  403,  403,  403,
      403,  373,  318,  403,  403,  403,  374,  403,  403,  403,
      403,  344,  344,  375,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  344,  376,  318,  403,  403,  403,  377,

      403,  403,  403,  403,  403,  403,  378,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  379,  318,  403,
      403,  403,  382,  383,  403,  403,  403,  384,  384,  385,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  384,
      386,  318,  403,  403,  403,  342,  343,  403,  403,  403,
      344,  344,  345,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  344,  346,  318,  403,  403,  403,  374,  403,
      403,  403,  403,  344,  344,  375,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  344,  376,  318,  403,  403,
      403,  377,  403,  403,  403,  403,  403,  403,  378,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  379,
      360,   88,   88,  403,  403,  403,  403,  403,  403,  403,
      403,  388,  403,  403,  403,  354,  318,  403,  403,  403,
      368,  403,  403,  403,  403,  403,  403,  369,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  370,  318,
      403,  403,  403,  377,  403,  403,  403,  403,  403,  403,
      378,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  379,  318,  403,  403,  403,  382,  383,  403,  403,
      403,  384,  384,  385,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  384,  386,  318,  403,  403,  403,  389,

      403,  403,  403,  403,  318,  318,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  318,  390,  318,  403,
      403,  403,  359,  403,  403,  403,  403,  360,  360,  361,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  360,
      362,  318,  403,  403,  403,  368,  403,  403,  403,  403,
      403,  403,  369,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  370,  360,   88,   88,  403,  403,  403,
      403,  403,  403,  403,  403,  358,  403,  403,  403,  366,
      318,  403,  403,  403,  389,  403,  403,  403,  403,  318,
      318,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  318,  390,  318,  403,  403,  403,  368,  403,  403,
      403,  403,  403,  403,  369,  403,  403,  403,  403,  403,
      403,  403,  403,  392,  403,  370,   88,   88,  403,  368,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      318,  403,  403,  403,  403,  403,  403,  370,  360,   88,
       88,  403,  403,  403,  403,  403,  403,  403,  403,  343,
      403,  403,  403,  383,  318,  403,  403,  403,  377,  403,
      403,  403,  403,  403,  403,  378,  403,  403,  403,  403,
      403,  403,  403,  403,  394,  403,  379,  360,   88,   88,
      403,  377,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  384,  403,  403,  403,  403,  403,  403,  379,
      318,  403,  403,  403,  395,  403,  403,  403,  403,  384,
      384,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  384,  396,  318,  403,  403,  403,  395,  403,  403,
      403,  403,  384,  384,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  384,  396,  318,  403,  403,  403,
      397,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  402,  403,  398,   20,
       20,   20,   20,   20,   20,   20,   22,  403,  403,  403,
       22,   22,   22,   26,   26,  403,   26,   26,   26,   26,

       23,  403,  403,  403,   23,   23,   23,   24,  403,  403,
      403,   24,   24,   24,   39,   39,   39,   39,   39,   39,
       39,   45,   45,  403,   45,   45,   45,   45,   52,  403,
      403,  403,   52,   52,   52,   56,  403,  403,  403,   56,
       56,   56,   27,   27,  403,   27,   27,   27,   27,   29,
       29,  403,   29,   29,   29,   29,   30,   30,  403,   30,
       30,   30,   30,   62,   62,   62,   62,   62,   62,   62,
       69,   69,  403,   69,   69,   69,   69,   75,   75,  403,
      403,   75,   75,   75,   81,   81,   81,   81,   81,   81,
       81,   40,   40,   40,   40,   40,   40,   84,  403,  403,

      403,   84,   84,   84,   88,  403,  403,  403,   88,   88,
       88,   85,  403,  403,  403,   85,   85,   85,   86,  403,
      403,  403,   86,   86,   86,   44,  403,  403,  403,   44,
       44,   44,   46,   46,  403,   46,   46,   46,   46,   47,
       47,  403,   47,   47,   47,   47,   48,   48,  403,   48,
       48,   48,   48,  100,  100,  100,  100,  100,  100,  100,
       53,  403,  403,  403,   53,   53,   53,   54,  403,  403,
      403,   54,   54,   54,  110,  110,  110,  110,  110,  110,
      110,  115,  115,  115,  115,  115,  115,  115,   63,   63,
       63,   63,   63,   63,   63,  119,  119,  403,  119,  119,

      119,  119,  124,  124,  403,  124,  124,  124,  124,  121,
      121,  403,  121,  121,  121,  121,  122,  122,  403,  122,
      122,  122,  122,   68,   68,  403,   68,   68,   68,   68,
       70,   70,  403,   70,  403,   70,   70,   71,   71,  403,
       71,   71,   71,   71,   73,   73,  403,   73,   73,   73,
       73,   76,   76,  403,  403,   76,   76,   76,   77,   77,
      403,  403,   77,   77,   77,   78,   78,  403,  403,   78,
       78,   78,  152,  152,  152,  152,  152,  152,  152,  159,
      159,  403,  403,  159,  159,  159,  165,  403,  403,  403,
      165,  165,  165,   82,  403,  403,  403,   82,  403,   82,

       92,  403,  403,  403,   92,   92,   92,   93,  403,  403,
      403,   93,   93,   93,  168,  168,  168,  168,  168,  168,
      168,  101,  101,  101,  101,  101,  101,  101,  172,  172,
      403,  172,  172,  172,  172,  177,  177,  403,  177,  177,
      177,  177,  173,  173,  403,  173,  173,  173,  173,  174,
      174,  403,  174,  174,  174,  174,  106,  106,  403,  106,
      106,  106,  106,   22,  403,  403,  403,   22,   22,   22,
      189,  189,  189,  189,  189,  189,  189,  190,  190,  190,
      190,  190,  190,  190,  193,  403,  403,  403,  193,  193,
      193,  194,  403,  403,  403,  194,  194,  194,  195,  403,

      403,  403,  195,  195,  195,  114,  403,  403,  403,  114,
      114,  114,  202,  202,  403,  202,  202,  202,  202,  117,
      117,  403,  117,  117,  117,  117,  121,  121,  403,  121,
      121,  121,  121,  122,  122,  403,  122,  122,  122,  122,
      124,  124,  403,  124,  124,  124,  124,  132,  132,  403,
      132,  132,  132,  132,  133,  133,  403,  133,  133,  133,
      133,   68,   68,  403,   68,   68,   68,   68,   70,   70,
      403,   70,  403,   70,   70,   71,   71,  403,   71,   71,
       71,   71,  209,  209,  209,  209,  209,  209,  209,   73,
       73,  403,   73,   73,   73,   73,  141,  141,  141,  141,

      141,  141,  141,  213,  213,  403,  213,  213,  213,  213,
      218,  218,  403,  218,  218,  218,  218,  214,  214,  403,
      214,  214,  214,  214,  216,  216,  403,  216,  216,  216,
      216,  146,  146,  403,  146,  146,  146,  146,  160,  160,
      403,  403,  160,  160,  160,  230,  230,  230,  230,  230,
      230,  230,  162,  162,  403,  403,  162,  162,  162,  153,
      153,  153,  153,  153,  153,  153,  163,  163,  403,  403,
      163,  163,  163,  238,  238,  403,  403,  238,  238,  238,
      243,  243,  403,  403,  243,  243,  243,  239,  239,  403,
      403,  239,  239,  239,  240,  240,  403,  403,  240,  240,

      240,  157,  157,  403,  403,  157,  157,  157,  254,  254,
      403,  403,  254,  254,  254,  159,  159,  403,  403,  159,
      159,  159,  260,  260,  260,  260,  260,  260,  260,  267,
      267,  403,  267,  267,  267,  267,  170,  170,  403,  170,
      170,  170,  170,  172,  172,  403,  172,  172,  172,  172,
      173,  173,  403,  173,  173,  173,  173,  174,  174,  403,
      174,  174,  174,  174,  177,  177,  403,  177,  177,  177,
      177,  184,  184,  403,  184,  184,  184,  184,  185,  185,
      403,  185,  185,  185,  185,  106,  106,  403,  106,  106,
      106,  106,   22,  403,  403,  403,   22,   22,   22,  275,

      403,  403,  403,  275,  275,  275,  276,  403,  403,  403,
      276,  276,  276,  191,  403,  403,  403,  191,  191,  191,
      192,  403,  403,  403,  192,  192,  192,  193,  403,  403,
      403,  193,  193,  193,  194,  403,  403,  403,  194,  194,
      194,  195,  403,  403,  403,  195,  195,  195,  199,  403,
      403,  403,  199,  199,  199,  200,  403,  403,  403,  200,
      200,  200,  114,  403,  403,  403,  114,  114,  114,  202,
      202,  403,  202,  202,  202,  202,   82,  403,  403,  403,
       82,  403,   82,  119,  119,  403,  119,  119,  119,  119,
       92,  403,  403,  403,   92,   92,   92,   93,  403,  403,

      403,   93,   93,   93,  280,  280,  403,  280,  280,  280,
      280,  211,  211,  403,  211,  211,  211,  211,  218,  218,
      403,  218,  218,  218,  218,  213,  213,  403,  213,  213,
      213,  213,  214,  214,  403,  214,  214,  214,  214,  216,
      216,  403,  216,  216,  216,  216,  225,  225,  403,  225,
      225,  225,  225,  146,  146,  403,  146,  146,  146,  146,
      227,  227,  403,  227,  227,  227,  227,  160,  160,  403,
      403,  160,  160,  160,  288,  288,  403,  403,  288,  288,
      288,  231,  231,  403,  403,  231,  231,  231,  292,  292,
      403,  403,  292,  292,  292,  162,  162,  403,  403,  162,

      162,  162,  297,  297,  297,  297,  297,  297,  297,  294,
      294,  403,  403,  294,  294,  294,  163,  163,  403,  403,
      163,  163,  163,  261,  261,  261,  261,  261,  261,  261,
      238,  238,  403,  403,  238,  238,  238,  239,  239,  403,
      403,  239,  239,  239,  240,  240,  403,  403,  240,  240,
      240,  254,  254,  403,  403,  254,  254,  254,  243,  243,
      403,  403,  243,  243,  243,  256,  256,  403,  403,  256,
      256,  256,  257,  257,  403,  403,  257,  257,  257,  250,
      250,  403,  403,  250,  250,  250,  251,  251,  403,  403,
      251,  251,  251,  157,  157,  403,  403,  157,  157,  157,

      266,  266,  403,  403,  266,  266,  266,  317,  317,  403,
      403,  317,  317,  317,  267,  267,  403,  267,  267,  267,
      267,  165,  403,  403,  403,  165,  165,  165,   82,  403,
      403,  403,   82,  403,   82,  172,  172,  403,  172,  172,
      172,  172,   92,  403,  403,  403,   92,   92,   92,   93,
      403,  403,  403,   93,   93,   93,   22,  403,  403,  403,
       22,   22,   22,  275,  403,  403,  403,  275,  275,  275,
      276,  403,  403,  403,  276,  276,  276,  193,  403,  403,
      403,  193,  193,  193,  280,  280,  403,  280,  280,  280,
      280,  211,  211,  403,  211,  211,  211,  211,  213,  213,

      403,  213,  213,  213,  213,  318,  318,  403,  403,  318,
      318,  318,  299,  299,  403,  403,  299,  299,  299,  320,
      320,  403,  403,  320,  320,  320,  321,  321,  403,  403,
      321,  321,  321,  312,  312,  403,  403,  312,  312,  312,
      313,  313,  403,  403,  313,  313,  313,  341,  341,  403,
      403,  341,  341,  341,  159,  159,  403,  403,  159,  159,
      159,  160,  160,  403,  403,  160,  160,  160,  358,  358,
      403,  403,  358,  358,  358,  364,  364,  364,  364,  364,
      364,  364,  162,  162,  403,  403,  162,  162,  162,  360,
      360,  403,  403,  360,  360,  360,  349,  349,  349,  349,

      349,  349,  349,  163,  163,  403,  403,  163,  163,  163,
      343,  343,  403,  403,  343,  343,  343,  344,  344,  403,
      403,  344,  344,  344,  354,  354,  403,  403,  354,  354,
      354,  366,  366,  403,  403,  366,  366,  366,  383,  383,
      403,  403,  383,  383,  383,  384,  384,  403,  403,  384,
      384,  384,    5,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403
    } ;

static const flex_int16_t yy_chk[5979] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    4,    4,
        4,    6,   92,   92,   14,    6,    6,    6,   12,   14,
       14,   22,   12,  251,   92,  395,   17,    6,    9,   28,
        9,    9,   12,    9,   50,   22,   17,    9,    9,    9,
       17,   38,   78,   28,   51,  251,  229,   38,   50,    9,
       10,   10,  394,   78,   10,   10,   10,   51,   51,   61,
       98,   61,  229,  392,   78,   10,   10,   11,   11,   11,
      126,   98,  126,   61,   98,  133,  389,  133,  133,   11,

       15,   15,   15,  151,  126,   15,  153,  151,  155,   15,
       15,   15,  163,  382,  151,   15,  163,  153,  374,  155,
      287,   15,   16,  163,   16,  178,  371,   16,  153,  365,
      155,   16,   16,   16,   16,  185,  178,  185,  287,  178,
      191,  191,  359,   16,   19,  199,  199,  185,   19,   19,
       19,  350,  191,  207,  207,  235,  240,  199,  243,  235,
       19,   23,   23,   23,  310,  207,  235,  240,  310,  243,
      342,  338,  329,   23,   25,   25,   25,  245,  240,   25,
      243,  245,  249,   25,   25,   25,  249,  327,  245,   25,
      272,  272,  318,  249,  326,   25,   26,  356,   26,   26,

      257,   26,  272,  319,  257,   26,   26,   26,  261,  313,
      318,  257,  261,  313,  311,  356,  305,   26,   29,  261,
       29,   29,  264,  298,  293,  276,  264,   29,   29,   29,
      294,  325,  398,  264,  294,  262,  398,  255,  195,   29,
       30,  294,   30,   30,  190,  183,  339,  325,  179,  325,
      339,   30,   31,   31,   31,   31,  171,   31,  160,  147,
      335,   31,   31,   31,  335,  135,  339,   31,  381,  129,
      125,  335,  381,   31,   32,  118,   32,  112,   32,   32,
       99,   32,  370,   32,   32,   32,  370,  373,  379,   88,
      381,  373,  379,  370,   86,   32,   33,   83,  373,  379,

      384,   33,   76,   70,  384,   33,   33,   33,  402,   60,
       54,   46,  402,   42,   40,   37,   35,   33,   33,   34,
       34,   34,  384,   27,   24,   18,   13,    5,   34,   34,
      402,    0,    0,    0,   34,    0,    0,    0,    0,    0,
       34,   39,    0,    0,    0,   39,   39,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   39,   41,   41,
       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,   43,    0,    0,    0,   43,   43,   43,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   43,   44,    0,
        0,    0,   44,   44,   44,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   44,   45,    0,   45,    0,    0,
       45,    0,    0,    0,   45,   45,   45,   45,    0,    0,
        0,    0,    0,    0,    0,    0,   45,   47,    0,   47,
        0,    0,    0,    0,    0,    0,   47,   47,   47,   47,
        0,    0,    0,    0,    0,    0,    0,    0,   47,   48,
        0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
       48,   48,   49,   49,   49,    0,    0,   49,    0,    0,
        0,   49,   49,   49,   49,    0,    0,   49,    0,    0,
        0,    0,    0,   49,   52,    0,    0,    0,   52,   52,
       52,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       52,   53,   53,   53,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   53,   55,   55,   55,    0,    0,   55,
        0,    0,    0,   55,   55,   55,    0,    0,    0,   55,
        0,    0,    0,    0,    0,   55,   58,   58,   58,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   58,   59,
       59,   59,   59,    0,    0,    0,    0,    0,   59,   59,
        0,    0,    0,    0,   59,    0,    0,    0,    0,    0,
       59,   62,    0,   62,   62,    0,   62,    0,    0,    0,
       62,   62,   62,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   62,   63,    0,   63,   63,    0,    0,    0,

        0,    0,    0,    0,   63,   65,    0,   65,   65,    0,
        0,    0,    0,    0,   65,   65,   65,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   65,   66,    0,   66,
       66,    0,    0,    0,    0,    0,    0,    0,   66,   67,
        0,   67,   67,    0,   67,    0,    0,    0,   67,   67,
       67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,   68,    0,   68,   68,    0,   68,    0,    0,    0,
       68,   68,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,   69,    0,   69,    0,   69,   69,    0,
       69,    0,   69,   69,   69,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   69,   71,    0,   71,    0,   71,
        0,    0,   71,    0,   71,   71,   71,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   71,   73,    0,   73,
        0,   73,    0,    0,   73,    0,    0,    0,   73,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   75,    0,    0,    0,    0,   75,
        0,    0,    0,   75,   75,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   75,   75,   77,    0,    0,
        0,    0,    0,    0,    0,    0,   77,   77,   77,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   77,   77,
       79,   79,   79,    0,    0,   79,    0,    0,    0,   79,
       79,   79,    0,    0,    0,   79,    0,    0,    0,    0,
        0,   79,   79,   80,    0,    0,    0,   80,   80,    0,
        0,    0,   80,   80,   80,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   80,   81,   81,   81,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   81,   85,   85,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,   87,   87,   87,    0,    0,    0,    0,    0,    0,
        0,    0,   87,    0,    0,    0,   87,   89,   89,   89,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   89,   90,   90,   90,    0,    0,    0,    0,
        0,    0,   90,   90,    0,    0,    0,    0,   90,    0,
        0,    0,    0,    0,   90,   91,   91,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       91,   94,    0,    0,    0,   94,   94,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,   96,   96,
       96,    0,    0,    0,    0,    0,    0,   96,   96,    0,
       96,    0,    0,   96,    0,    0,    0,    0,    0,   96,
       97,   97,   97,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   97,  100,    0,  100,    0,    0,  100,    0,
        0,    0,  100,  100,  100,  100,    0,    0,    0,    0,
        0,    0,    0,    0,  100,  101,    0,  101,    0,    0,
        0,    0,    0,    0,    0,    0,  101,  101,  102,    0,
      102,    0,    0,    0,    0,    0,    0,  102,  102,  102,
      102,    0,    0,    0,    0,    0,    0,    0,    0,  102,
      103,    0,  103,    0,    0,    0,    0,    0,    0,    0,
        0,  103,  103,  104,    0,  104,    0,    0,  104,    0,
        0,    0,  104,  104,  104,  104,    0,    0,    0,    0,
        0,    0,    0,    0,  104,  106,    0,  106,    0,    0,

      106,    0,    0,    0,  106,  106,  106,  106,    0,    0,
        0,    0,    0,    0,    0,    0,  106,  107,    0,    0,
        0,  107,  107,  107,    0,    0,    0,    0,    0,  107,
        0,    0,    0,  107,  108,  108,  108,    0,    0,    0,
        0,    0,    0,  108,  108,    0,    0,    0,    0,  108,
        0,    0,    0,    0,    0,  108,  109,  109,  109,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  109,  110,    0,    0,    0,  110,  110,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  110,  111,
      111,  111,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  111,  113,    0,    0,    0,  113,  113,  113,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  113,  114,
        0,    0,    0,  114,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  114,  115,    0,  115,  115,
        0,    0,    0,    0,    0,  115,  115,  115,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  115,  116,  116,
      116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      116,  117,    0,  117,  117,    0,    0,    0,    0,    0,
      117,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  117,  121,    0,  121,  121,    0,    0,    0,

        0,    0,  121,  121,  121,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  121,  122,    0,  122,  122,    0,
        0,    0,    0,    0,    0,    0,  122,  123,  123,  123,
        0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
        0,    0,  123,  124,    0,  124,  124,    0,    0,    0,
        0,    0,    0,    0,  124,  127,  127,  127,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  127,  128,  128,
      128,  128,    0,    0,    0,    0,    0,  128,  128,    0,
        0,    0,    0,  128,    0,    0,    0,    0,    0,  128,
      130,  130,  130,  130,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  130,  132,    0,  132,  132,
        0,    0,    0,    0,    0,  132,  132,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  132,  134,    0,
      134,  134,    0,  134,    0,    0,    0,  134,  134,  134,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  134,
      136,    0,  136,    0,  136,    0,    0,  136,    0,  136,
      136,  136,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  136,  137,  137,  137,    0,  137,    0,    0,  137,
        0,  137,  137,    0,    0,    0,    0,  137,    0,    0,
        0,    0,    0,  137,  138,    0,  138,    0,  138,    0,

        0,  138,    0,    0,    0,  138,  139,    0,    0,  139,
        0,    0,  139,    0,    0,    0,    0,    0,    0,    0,
      139,  140,    0,  140,    0,  140,  140,    0,  140,    0,
      140,  140,  140,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  140,  141,    0,  141,    0,  141,    0,    0,
      141,    0,    0,    0,  141,  142,    0,  142,    0,  142,
        0,    0,  142,    0,  142,  142,  142,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  142,  143,    0,  143,
        0,  143,  143,    0,  143,    0,  143,  143,  143,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  143,  144,

        0,  144,    0,  144,    0,    0,  144,    0,    0,    0,
      144,  146,    0,  146,    0,  146,  146,    0,  146,    0,
      146,  146,  146,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  146,  148,  148,  148,    0,    0,    0,    0,
        0,    0,  148,  148,    0,    0,    0,    0,  148,    0,
        0,    0,    0,    0,  148,  148,  149,    0,    0,    0,
      149,    0,    0,    0,    0,  149,  149,  149,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  149,  150,  150,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  150,    0,    0,    0,    0,    0,    0,  150,

      152,    0,    0,    0,    0,  152,    0,    0,    0,  152,
      152,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  152,  152,  154,    0,    0,    0,    0,    0,    0,
        0,    0,  154,  154,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  154,  154,  156,    0,    0,    0,
        0,  156,    0,    0,    0,  156,  156,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  156,  156,  157,
        0,    0,    0,    0,  157,    0,    0,    0,  157,  157,
      157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      157,  157,  158,    0,    0,    0,  158,  158,    0,    0,

        0,  158,  158,  158,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  158,  159,    0,    0,    0,  159,  159,
        0,    0,    0,  159,  159,  159,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  159,  161,    0,    0,    0,
      161,  161,    0,    0,    0,  161,  161,  161,    0,    0,
        0,    0,    0,    0,    0,    0,  161,  161,  162,    0,
        0,    0,  162,    0,    0,    0,    0,  162,  162,  162,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  162,
      164,  164,  164,    0,  164,  164,    0,    0,    0,  164,
      164,  164,    0,    0,    0,  164,    0,    0,    0,    0,

        0,  164,  165,  165,  165,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  165,  166,  166,  166,    0,    0,
        0,    0,    0,    0,  166,  166,    0,    0,    0,    0,
      166,    0,    0,    0,    0,    0,  166,  168,    0,  168,
        0,    0,    0,    0,    0,    0,  168,  168,  168,  168,
        0,    0,    0,    0,    0,    0,    0,    0,  168,  169,
      169,  169,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  169,  170,    0,  170,    0,    0,    0,    0,    0,
        0,  170,  170,    0,  170,    0,    0,    0,    0,    0,
        0,    0,    0,  170,  172,    0,  172,    0,    0,  172,

        0,    0,    0,  172,  172,  172,  172,    0,    0,    0,
        0,    0,    0,    0,    0,  172,  173,    0,  173,    0,
        0,    0,    0,    0,    0,  173,  173,  173,  173,    0,
        0,    0,    0,    0,    0,    0,    0,  173,  174,    0,
      174,    0,    0,    0,    0,    0,    0,    0,    0,  174,
      174,  175,  175,  175,    0,    0,  175,    0,    0,    0,
      175,  175,  175,  175,    0,    0,  175,    0,    0,    0,
        0,    0,  175,  177,    0,  177,    0,    0,    0,    0,
        0,    0,    0,    0,  177,  177,  180,  180,  180,    0,
        0,    0,    0,    0,    0,  180,  180,    0,  180,    0,

        0,  180,    0,    0,    0,    0,    0,  180,  181,  181,
      181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      181,  182,  182,  182,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  182,    0,    0,  182,  184,    0,  184,
        0,    0,    0,    0,    0,    0,  184,  184,    0,  184,
        0,    0,    0,    0,    0,    0,    0,    0,  184,  186,
        0,  186,    0,    0,  186,    0,    0,    0,  186,  186,
      186,  186,    0,    0,    0,    0,    0,    0,    0,    0,
      186,  188,    0,    0,    0,  188,  188,  188,    0,  188,
        0,    0,    0,    0,    0,    0,    0,  188,  189,  189,

      189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      189,  193,    0,    0,    0,  193,  193,  193,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  193,  194,  194,
      194,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      194,  196,  196,  196,    0,    0,  196,    0,    0,    0,
      196,  196,  196,    0,    0,    0,  196,    0,    0,    0,
        0,    0,  196,  197,  197,  197,    0,    0,    0,    0,
        0,    0,  197,  197,    0,    0,    0,    0,  197,    0,
        0,    0,    0,    0,  197,  198,  198,  198,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      198,  201,    0,    0,    0,  201,  201,  201,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  201,  202,    0,
      202,  202,    0,    0,    0,    0,    0,  202,  202,  202,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  202,
      203,  203,  203,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  203,  204,  204,  204,  204,    0,    0,    0,
        0,    0,  204,  204,    0,    0,    0,    0,  204,    0,
        0,    0,    0,    0,  204,  206,    0,  206,  206,    0,
      206,    0,    0,    0,  206,  206,  206,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  206,  209,    0,  209,

        0,  209,    0,    0,  209,    0,  209,  209,  209,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  209,  210,
        0,  210,    0,  210,    0,    0,  210,    0,  210,  210,
      210,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      210,  211,    0,  211,    0,  211,    0,    0,  211,    0,
      211,  211,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  211,  212,    0,  212,    0,  212,    0,    0,
      212,    0,    0,    0,  212,  213,    0,  213,    0,  213,
      213,    0,  213,    0,  213,  213,  213,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  213,  214,    0,  214,

        0,  214,    0,    0,  214,    0,  214,  214,  214,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  214,  215,
        0,  215,    0,  215,  215,    0,  215,    0,  215,  215,
      215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      215,  216,    0,  216,    0,  216,    0,    0,  216,    0,
        0,    0,  216,  217,  217,  217,    0,    0,    0,    0,
        0,    0,    0,    0,  217,    0,    0,    0,  217,  218,
        0,  218,    0,  218,    0,    0,  218,    0,    0,    0,
      218,  220,    0,    0,  220,    0,    0,  220,    0,    0,
        0,    0,    0,    0,    0,  220,  221,    0,  221,    0,

      221,    0,    0,  221,    0,  221,  221,  221,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  221,  222,  222,
      222,    0,    0,    0,    0,    0,    0,    0,    0,  222,
        0,    0,    0,  222,  223,    0,  223,    0,  223,    0,
        0,  223,    0,    0,    0,  223,  224,  224,  224,    0,
        0,    0,    0,    0,    0,    0,    0,  224,    0,    0,
        0,  224,  225,    0,  225,    0,  225,    0,    0,  225,
        0,  225,  225,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  225,  226,    0,  226,    0,  226,  226,
        0,  226,    0,  226,  226,  226,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  226,  227,    0,  227,    0,
      227,    0,    0,  227,  228,    0,  228,    0,  228,  228,
        0,  228,    0,  228,  228,  228,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  228,  230,    0,    0,    0,
        0,    0,    0,    0,    0,  230,  230,  230,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  230,  230,  231,
        0,    0,    0,    0,    0,    0,    0,    0,  231,  231,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      231,  231,  232,    0,    0,    0,  232,    0,    0,    0,
        0,  232,  232,  232,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  232,  233,    0,    0,    0,  233,    0,
        0,    0,    0,  233,  233,  233,    0,    0,    0,    0,
        0,    0,    0,    0,  233,  233,  234,  234,  234,    0,
      234,    0,    0,    0,    0,  234,  234,    0,    0,    0,
        0,  234,    0,    0,    0,    0,    0,  234,  236,    0,
        0,    0,  236,    0,    0,    0,    0,    0,    0,  236,
        0,    0,    0,    0,    0,    0,    0,    0,  236,  237,
      237,    0,  237,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  237,  238,    0,    0,    0,    0,  238,
        0,    0,    0,  238,  238,  238,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  238,  238,  239,    0,    0,
        0,    0,    0,    0,    0,    0,  239,  239,  239,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  239,  239,
      241,  241,  241,    0,    0,  241,    0,    0,    0,  241,
      241,  241,    0,    0,    0,  241,    0,    0,    0,    0,
        0,  241,  241,  242,    0,    0,    0,  242,  242,    0,
        0,    0,  242,  242,  242,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  242,  244,  244,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  244,
        0,    0,    0,    0,    0,    0,  244,  246,  246,  246,

        0,    0,    0,    0,    0,    0,  246,  246,    0,    0,
        0,    0,  246,    0,    0,    0,    0,    0,  246,  246,
      247,    0,    0,    0,  247,    0,    0,    0,    0,  247,
      247,  247,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  247,  248,  248,  248,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  248,    0,    0,
        0,    0,    0,    0,  248,  250,    0,    0,    0,    0,
        0,    0,    0,    0,  250,  250,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  250,  250,  252,    0,
        0,    0,    0,  252,    0,    0,    0,  252,  252,  252,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  252,
      252,  253,    0,    0,    0,  253,  253,    0,    0,    0,
      253,  253,  253,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  253,  254,    0,    0,    0,  254,  254,    0,
        0,    0,  254,  254,  254,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  254,  256,    0,    0,    0,  256,
        0,    0,    0,    0,  256,  256,  256,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  256,  258,  258,  258,
        0,    0,    0,    0,    0,    0,    0,    0,  258,    0,
        0,    0,  258,  259,    0,    0,    0,  259,  259,    0,

        0,    0,  259,  259,  259,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  259,  259,  266,    0,    0,    0,
      266,  266,    0,    0,    0,  266,  266,  266,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  266,  267,    0,
      267,    0,    0,    0,    0,    0,    0,  267,  267,  267,
      267,    0,    0,    0,    0,    0,    0,    0,    0,  267,
      268,  268,  268,    0,    0,    0,    0,    0,    0,  268,
      268,    0,  268,    0,    0,  268,    0,    0,    0,    0,
        0,  268,  269,  269,  269,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  269,  271,    0,  271,    0,    0,

      271,    0,    0,    0,  271,  271,  271,  271,    0,    0,
        0,    0,    0,    0,    0,    0,  271,  274,    0,    0,
        0,  274,  274,  274,    0,    0,  274,    0,    0,    0,
        0,    0,    0,  274,  275,  275,  275,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  275,  277,  277,  277,
        0,    0,    0,    0,    0,    0,  277,  277,    0,    0,
        0,    0,  277,    0,    0,    0,    0,    0,  277,  278,
      278,  278,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  278,  279,    0,    0,    0,  279,
      279,  279,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  279,  280,    0,  280,    0,  280,    0,    0,  280,
        0,  280,  280,  280,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  280,  281,    0,  281,    0,  281,    0,
        0,  281,    0,  281,  281,  281,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  281,  282,  282,  282,    0,
        0,    0,    0,    0,    0,    0,    0,  282,    0,    0,
        0,  282,  283,    0,  283,    0,  283,    0,    0,  283,
        0,  283,  283,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  283,  284,    0,  284,    0,  284,  284,
        0,  284,    0,  284,  284,  284,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  284,  285,    0,  285,    0,
      285,    0,    0,  285,    0,  285,  285,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  285,  286,    0,
      286,    0,  286,    0,    0,  286,  288,    0,    0,    0,
        0,    0,    0,    0,    0,  288,  288,  288,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  288,  288,  289,
      289,  289,    0,    0,    0,    0,    0,    0,    0,    0,
      289,    0,    0,    0,  289,  290,    0,    0,    0,  290,
        0,    0,    0,    0,  290,  290,  290,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  290,  291,    0,    0,

        0,  291,    0,    0,    0,    0,  291,  291,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  291,  295,
      295,  295,    0,    0,    0,    0,    0,    0,    0,    0,
      295,    0,    0,    0,  295,  296,    0,    0,    0,  296,
        0,    0,    0,    0,  296,  296,  296,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  296,  296,  299,    0,
        0,    0,  299,    0,    0,    0,    0,  299,  299,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  299,
      300,    0,    0,    0,  300,    0,    0,    0,    0,    0,
        0,  300,    0,    0,    0,    0,    0,    0,    0,    0,

      300,  301,  301,    0,  301,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  301,  302,    0,    0,    0,
      302,    0,    0,    0,    0,    0,    0,  302,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  302,  303,
        0,    0,    0,  303,    0,    0,    0,    0,    0,    0,
      303,    0,    0,    0,    0,    0,    0,    0,    0,  303,
      304,    0,    0,    0,    0,  304,    0,    0,    0,  304,
      304,  304,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  304,  304,  306,  306,  306,    0,    0,    0,    0,
        0,    0,    0,    0,  306,    0,    0,    0,  306,  307,

        0,    0,    0,  307,    0,    0,    0,    0,    0,    0,
      307,    0,    0,    0,    0,    0,    0,    0,    0,  307,
      308,  308,  308,    0,  308,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  308,  309,    0,    0,    0,
      309,    0,    0,    0,    0,  309,  309,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  309,  312,    0,
        0,    0,  312,    0,    0,    0,    0,  312,  312,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  312,
      315,    0,    0,    0,  315,  315,    0,    0,    0,  315,
      315,  315,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  315,  315,  317,    0,    0,    0,  317,  317,    0,
        0,    0,  317,  317,  317,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  317,  317,  320,    0,    0,    0,
      320,    0,    0,    0,    0,  320,  320,  320,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  320,  320,  321,
        0,    0,    0,  321,    0,    0,    0,    0,    0,    0,
      321,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  321,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  323,    0,    0,

        0,  323,  323,    0,    0,    0,  323,  323,  323,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  323,  324,
        0,    0,    0,  324,  324,  324,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  324,  328,    0,    0,    0,
      328,    0,    0,    0,    0,  328,  328,  328,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  328,  328,  330,
      330,  330,    0,  330,    0,    0,    0,    0,  330,  330,
        0,    0,    0,    0,  330,    0,    0,    0,    0,    0,
      330,  330,  331,    0,    0,    0,  331,    0,    0,    0,
        0,  331,  331,  331,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  331,  332,    0,    0,    0,  332,    0,
        0,    0,    0,    0,    0,  332,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  332,  333,    0,    0,
        0,  333,    0,    0,    0,    0,    0,    0,  333,    0,
        0,    0,    0,    0,    0,    0,    0,  333,    0,  333,
      334,  334,    0,  334,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  334,    0,    0,    0,    0,    0,
        0,  334,  336,    0,    0,    0,  336,    0,    0,    0,
        0,  336,  336,  336,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  336,  336,  337,    0,    0,    0,  337,

        0,    0,    0,    0,    0,    0,  337,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  337,  340,    0,
        0,    0,  340,  340,    0,    0,    0,  340,  340,  340,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  340,
      340,  341,    0,    0,    0,  341,  341,    0,    0,    0,
      341,  341,  341,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  341,  341,  343,    0,    0,    0,  343,    0,
        0,    0,    0,  343,  343,  343,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  343,  343,  344,    0,    0,
        0,  344,    0,    0,    0,    0,    0,    0,  344,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  344,
      345,  345,  345,    0,    0,    0,    0,    0,    0,    0,
        0,  345,    0,    0,    0,  345,  349,    0,    0,    0,
      349,    0,    0,    0,    0,    0,    0,  349,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  349,  352,
        0,    0,    0,  352,    0,    0,    0,    0,    0,    0,
      352,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  352,  354,    0,    0,    0,  354,  354,    0,    0,
        0,  354,  354,  354,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  354,  354,  357,    0,    0,    0,  357,

        0,    0,    0,    0,  357,  357,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  357,  357,  358,    0,
        0,    0,  358,    0,    0,    0,    0,  358,  358,  358,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  358,
      358,  360,    0,    0,    0,  360,    0,    0,    0,    0,
        0,    0,  360,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  360,  361,  361,  361,    0,    0,    0,
        0,    0,    0,    0,    0,  361,    0,    0,    0,  361,
      366,    0,    0,    0,  366,    0,    0,    0,    0,  366,
      366,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  366,  366,  368,    0,    0,    0,  368,    0,    0,
        0,    0,    0,    0,  368,    0,    0,    0,    0,    0,
        0,    0,    0,  368,    0,  368,  369,  369,    0,  369,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      369,    0,    0,    0,    0,    0,    0,  369,  375,  375,
      375,    0,    0,    0,    0,    0,    0,    0,    0,  375,
        0,    0,    0,  375,  377,    0,    0,    0,  377,    0,
        0,    0,    0,    0,    0,  377,    0,    0,    0,    0,
        0,    0,    0,    0,  377,    0,  377,  378,  378,  378,
        0,  378,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  378,    0,    0,    0,    0,    0,    0,  378,
      380,    0,    0,    0,  380,    0,    0,    0,    0,  380,
      380,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  380,  380,  383,    0,    0,    0,  383,    0,    0,
        0,    0,  383,  383,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  383,  383,  397,    0,    0,    0,
      397,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  397,    0,  397,  404,
      404,  404,  404,  404,  404,  404,  405,    0,    0,    0,
      405,  405,  405,  406,  406,    0,  406,  406,  406,  406,

      407,    0,    0,    0,  407,  407,  407,  408,    0,    0,
        0,  408,  408,  408,  409,  409,  409,  409,  409,  409,
      409,  410,  410,    0,  410,  410,  410,  410,  411,    0,
        0,    0,  411,  411,  411,  412,    0,    0,    0,  412,
      412,  412,  413,  413,    0,  413,  413,  413,  413,  414,
      414,    0,  414,  414,  414,  414,  415,  415,    0,  415,
      415,  415,  415,  416,  416,  416,  416,  416,  416,  416,
      417,  417,    0,  417,  417,  417,  417,  418,  418,    0,
        0,  418,  418,  418,  419,  419,  419,  419,  419,  419,
      419,  420,  420,  420,  420,  420,  420,  421,    0,    0,

        0,  421,  421,  421,  422,    0,    0,    0,  422,  422,
      422,  423,    0,    0,    0,  423,  423,  423,  424,    0,
        0,    0,  424,  424,  424,  425,    0,    0,    0,  425,
      425,  425,  426,  426,    0,  426,  426,  426,  426,  427,
      427,    0,  427,  427,  427,  427,  428,  428,    0,  428,
      428,  428,  428,  429,  429,  429,  429,  429,  429,  429,
      430,    0,    0,    0,  430,  430,  430,  431,    0,    0,
        0,  431,  431,  431,  432,  432,  432,  432,  432,  432,
      432,  433,  433,  433,  433,  433,  433,  433,  434,  434,
      434,  434,  434,  434,  434,  435,  435,    0,  435,  435,

      435,  435,  436,  436,    0,  436,  436,  436,  436,  437,
      437,    0,  437,  437,  437,  437,  438,  438,    0,  438,
      438,  438,  438,  439,  439,    0,  439,  439,  439,  439,
      440,  440,    0,  440,    0,  440,  440,  441,  441,    0,
      441,  441,  441,  441,  442,  442,    0,  442,  442,  442,
      442,  443,  443,    0,    0,  443,  443,  443,  444,  444,
        0,    0,  444,  444,  444,  445,  445,    0,    0,  445,
      445,  445,  446,  446,  446,  446,  446,  446,  446,  447,
      447,    0,    0,  447,  447,  447,  448,    0,    0,    0,
      448,  448,  448,  449,    0,    0,    0,  449,    0,  449,

      450,    0,    0,    0,  450,  450,  450,  451,    0,    0,
        0,  451,  451,  451,  452,  452,  452,  452,  452,  452,
      452,  453,  453,  453,  453,  453,  453,  453,  454,  454,
        0,  454,  454,  454,  454,  455,  455,    0,  455,  455,
      455,  455,  456,  456,    0,  456,  456,  456,  456,  457,
      457,    0,  457,  457,  457,  457,  458,  458,    0,  458,
      458,  458,  458,  459,    0,    0,    0,  459,  459,  459,
      460,  460,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461,  462,    0,    0,    0,  462,  462,
      462,  463,    0,    0,    0,  463,  463,  463,  464,    0,

        0,    0,  464,  464,  464,  465,    0,    0,    0,  465,
      465,  465,  466,  466,    0,  466,  466,  466,  466,  467,
      467,    0,  467,  467,  467,  467,  468,  468,    0,  468,
      468,  468,  468,  469,  469,    0,  469,  469,  469,  469,
      470,  470,    0,  470,  470,  470,  470,  471,  471,    0,
      471,  471,  471,  471,  472,  472,    0,  472,  472,  472,
      472,  473,  473,    0,  473,  473,  473,  473,  474,  474,
        0,  474,    0,  474,  474,  475,  475,    0,  475,  475,
      475,  475,  476,  476,  476,  476,  476,  476,  476,  477,
      477,    0,  477,  477,  477,  477,  478,  478,  478,  478,

      478,  478,  478,  479,  479,    0,  479,  479,  479,  479,
      480,  480,    0,  480,  480,  480,  480,  481,  481,    0,
      481,  481,  481,  481,  482,  482,    0,  482,  482,  482,
      482,  483,  483,    0,  483,  483,  483,  483,  484,  484,
        0,    0,  484,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  486,  486,    0,    0,  486,  486,  486,  487,
      487,  487,  487,  487,  487,  487,  488,  488,    0,    0,
      488,  488,  488,  489,  489,    0,    0,  489,  489,  489,
      490,  490,    0,    0,  490,  490,  490,  491,  491,    0,
        0,  491,  491,  491,  492,  492,    0,    0,  492,  492,

      492,  493,  493,    0,    0,  493,  493,  493,  494,  494,
        0,    0,  494,  494,  494,  495,  495,    0,    0,  495,
      495,  495,  496,  496,  496,  496,  496,  496,  496,  497,
      497,    0,  497,  497,  497,  497,  498,  498,    0,  498,
      498,  498,  498,  499,  499,    0,  499,  499,  499,  499,
      500,  500,    0,  500,  500,  500,  500,  501,  501,    0,
      501,  501,  501,  501,  502,  502,    0,  502,  502,  502,
      502,  503,  503,    0,  503,  503,  503,  503,  504,  504,
        0,  504,  504,  504,  504,  505,  505,    0,  505,  505,
      505,  505,  506,    0,    0,    0,  506,  506,  506,  507,

        0,    0,    0,  507,  507,  507,  508,    0,    0,    0,
      508,  508,  508,  509,    0,    0,    0,  509,  509,  509,
      510,    0,    0,    0,  510,  510,  510,  511,    0,    0,
        0,  511,  511,  511,  512,    0,    0,    0,  512,  512,
      512,  513,    0,    0,    0,  513,  513,  513,  514,    0,
        0,    0,  514,  514,  514,  515,    0,    0,    0,  515,
      515,  515,  516,    0,    0,    0,  516,  516,  516,  517,
      517,    0,  517,  517,  517,  517,  518,    0,    0,    0,
      518,    0,  518,  519,  519,    0,  519,  519,  519,  519,
      520,    0,    0,    0,  520,  520,  520,  521,    0,    0,

        0,  521,  521,  521,  522,  522,    0,  522,  522,  522,
      522,  523,  523,    0,  523,  523,  523,  523,  524,  524,
        0,  524,  524,  524,  524,  525,  525,    0,  525,  525,
      525,  525,  526,  526,    0,  526,  526,  526,  526,  527,
      527,    0,  527,  527,  527,  527,  528,  528,    0,  528,
      528,  528,  528,  529,  529,    0,  529,  529,  529,  529,
      530,  530,    0,  530,  530,  530,  530,  531,  531,    0,
        0,  531,  531,  531,  532,  532,    0,    0,  532,  532,
      532,  533,  533,    0,    0,  533,  533,  533,  534,  534,
        0,    0,  534,  534,  534,  535,  535,    0,    0,  535,

      535,  535,  536,  536,  536,  536,  536,  536,  536,  537,
      537,    0,    0,  537,  537,  537,  538,  538,    0,    0,
      538,  538,  538,  539,  539,  539,  539,  539,  539,  539,
      540,  540,    0,    0,  540,  540,  540,  541,  541,    0,
        0,  541,  541,  541,  542,  542,    0,    0,  542,  542,
      542,  543,  543,    0,    0,  543,  543,  543,  544,  544,
        0,    0,  544,  544,  544,  545,  545,    0,    0,  545,
      545,  545,  546,  546,    0,    0,  546,  546,  546,  547,
      547,    0,    0,  547,  547,  547,  548,  548,    0,    0,
      548,  548,  548,  549,  549,    0,    0,  549,  549,  549,

      550,  550,    0,    0,  550,  550,  550,  551,  551,    0,
        0,  551,  551,  551,  552,  552,    0,  552,  552,  552,
      552,  553,    0,    0,    0,  553,  553,  553,  554,    0,
        0,    0,  554,    0,  554,  555,  555,    0,  555,  555,
      555,  555,  556,    0,    0,    0,  556,  556,  556,  557,
        0,    0,    0,  557,  557,  557,  558,    0,    0,    0,
      558,  558,  558,  559,    0,    0,    0,  559,  559,  559,
      560,    0,    0,    0,  560,  560,  560,  561,    0,    0,
        0,  561,  561,  561,  562,  562,    0,  562,  562,  562,
      562,  563,  563,    0,  563,  563,  563,  563,  564,  564,

        0,  564,  564,  564,  564,  565,  565,    0,    0,  565,
      565,  565,  566,  566,    0,    0,  566,  566,  566,  567,
      567,    0,    0,  567,  567,  567,  568,  568,    0,    0,
      568,  568,  568,  569,  569,    0,    0,  569,  569,  569,
      570,  570,    0,    0,  570,  570,  570,  571,  571,    0,
        0,  571,  571,  571,  572,  572,    0,    0,  572,  572,
      572,  573,  573,    0,    0,  573,  573,  573,  574,  574,
        0,    0,  574,  574,  574,  575,  575,  575,  575,  575,
      575,  575,  576,  576,    0,    0,  576,  576,  576,  577,
      577,    0,    0,  577,  577,  577,  578,  578,  578,  578,

      578,  578,  578,  579,  579,    0,    0,  579,  579,  579,
      580,  580,    0,    0,  580,  580,  580,  581,  581,    0,
        0,  581,  581,  581,  582,  582,    0,    0,  582,  582,
      582,  583,  583,    0,    0,  583,  583,  583,  584,  584,
        0,    0,  584,  584,  584,  585,  585,    0,    0,  585,
      585,  585,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[21] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */

#line 13 "shell.l"

#include <cstring>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.hh"
#include "shell.hh"
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

static void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

  if (!isatty(0)) {
    return getc(f);
  }

  if (p==NULL || *p == 0) {
    char * s = read_line();
    p =s;
  }
  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

#line 2006 "lex.yy.cc"
#line 2007 "lex.yy.cc"

#define INITIAL 0
#define src 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 57 "shell.l"


#line 2228 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 404 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5953 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 86 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "shell.l"
{
  return INTEGERGREAT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 98 "shell.l"
{
  BEGIN(src);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 102 "shell.l"
{
  FILE * in = fopen(yytext, "r+");

  if (!in) {
    perror("fopen");
    BEGIN(INITIAL);
  } else {
    fputc('\n', in);
    yypush_buffer_state(yy_create_buffer(in, YY_BUF_SIZE));
    BEGIN(INITIAL);
    Shell::_srcCmd = true;
    yyparse();
    yypop_buffer_state();
    fclose(in);
    Shell::_srcCmd = false;
  }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 120 "shell.l"
{
  std::string str = std::string(yytext);
  std::string home = getenv("HOME");
  if (str.size() == 1) {
    yylval.cpp_string = new std::string(home);
  } 
  else {
    if (str[1] == '/') {
      str = home + str.substr(1, -1);
    } 
    else {
      str = std::string("/homes/") + str.substr(1,-1);
    }
    yylval.cpp_string = new std::string(str);
  }
  return WORD;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 138 "shell.l"
{
  std::string str = std::string(yytext);
  std::size_t found = str.find('\\');
  while(found!=-1) {
    str = str.substr(0,found) + str.substr(found+1,std::string::npos);
    found = str.find('\\', found+1);
  }
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 150 "shell.l"
{
  std::string str = std::string(yytext);
  std::string result = "";
  std::size_t found = str.find('$');
  while(found!=-1) {
    std::string component;
    result += str.substr(0, found);
    if (str[found+1] == '{') {
      std::size_t end = str.find('}');
      if (end != -1) {
        component = str.substr(found+2, end-found-2);
        if (getenv(component.c_str())) result += getenv(component.c_str());
        else result += component;      
        str = str.substr(end+1,-1);
      }
    }
    found = str.find('$');
  }
  result += str;
  /*result = result + str.substr(2,str.size()-3);
  if (getenv(str.c_str()))
    yylval.cpp_string = new std::string(getenv(str.c_str()));
  else
    yylval.cpp_string = new std::string(str);*/
  yylval.cpp_string = new std::string(result);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 178 "shell.l"
{
  /* Generate subshell */
  int i=0;

  std::string * cmd = new std::string(yytext);
  cmd->pop_back();

  // string check
  if (strchr(cmd->c_str(), '`') != NULL) { // if `...`
    cmd = new std::string(yytext+1);
    cmd->pop_back();
  }
  else {
    cmd = new std::string(yytext+2);  // if $(...)
    cmd->pop_back();
  }

  // Setup i/op redirection in subshell
  // and call exec
  int tmpin = dup(0);
  int tmpout = dup(1);

  // Parent creates two pipes
  int fdpipein[2];
  int fdpipeout[2];

  pipe(fdpipein);
  pipe(fdpipeout);

  // write subshell command 
  write(fdpipein[1], cmd->c_str(), cmd->size());
  write(fdpipein[1], "\n", 1);
  write(fdpipein[1], "exit", 4);
  write(fdpipein[1], "\n", 1);
  close(fdpipein[1]);

  dup2(fdpipein[0], 0);
  close(fdpipein[0]);
  dup2(fdpipeout[1], 1);
  close(fdpipeout[1]);

  // In child redirect inout from pin[0] and redirect
  // output to pout[1]. Then execute shell from
  // /proc/self/exe
  int ret = fork();
  if (ret == 0) {
    execvp("/proc/self/exe", NULL);
    _exit(1);
  } else if (ret < 0) {
    perror("fork");
    exit(1);
  }

  // restore in/out defaults
  dup2(tmpin, 0);
  dup2(tmpout, 1);
  close(tmpin);
  close(tmpout);

  // read from fdpipeout
  char ch;
  size_t size = 0;
  i = 0;

  // The parent reads the ouput from pout[0] and
  // writes it into a buffer.
  char * buffer = new char[6666];
  while (read(fdpipeout[0], &ch, 1)) {
    if ( ch == '\n' ? buffer[i++] = ' ' : buffer[i++] = ch);
  }
  buffer[i] = '\0';

  // The parent puts the characters
  // in the buffer back into lex by calling myunoutc(in c)
  // in reverse order.
  i = strlen(buffer) - 1;
  for (i ; i >= 0; i--) {
    unput(buffer[i]);
  }
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 260 "shell.l"
{
  int i = 0;
  char * escChar;
  escChar = new char[strlen(yytext)*2];
  char * args = yytext;
  while (*args) {
    if (*args == '\\') {
      escChar[i] = *(++args);
      i++;
    }
    else {
      escChar[i] = *args;
      i++;
    }
    args++;
  }
  escChar[i] = '\0';
  yylval.cpp_string = new std::string(escChar);
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 281 "shell.l"
{
  int i = 0;
  char * quoteChar = new char[strlen(yytext)];
  char *args = yytext;
  while (*args) {
    if (*args == '\"') {
      quoteChar[i] = *(++args);
      i++;
    }
    else {
      quoteChar[i] = *args;
      i++;
    }
    args++;
  }
  quoteChar[i] = '\0';
  yylval.cpp_string = new std::string(quoteChar);
  return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 301 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 306 "shell.l"
ECHO;
	YY_BREAK
#line 2606 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(src):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 404 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 404 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 403);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 306 "shell.l"
